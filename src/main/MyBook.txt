Exceptions in .NET are two types - system and application. System exceptions
are defined in .NET libraries and are used by the framework, while application
exceptions are defined by application developers and are used by the
application software. When we, as developers, design our own exception
classes, it is a good practice to inherit from ApplicationException and not
directly from SystemException (or even worse � directly from Exception).
SystemException should only be inherited internally within the .NET
Framework.
426 Fundamentals of Computer Programming with C#
Some of the worst system exceptions include ExecutionEngineException
(which is thrown on  internal error within CLR), StackOverflowException
(call-stack overflow, most probably due to infinite recursion) and
OutOfMemoryException (insufficient memory). In all of these cases, our
application could hardly recover or react in some reasonable manner. Most
frequently, when such exception occurs, the application just crashes.
Exceptions related to interaction with external components (like COM
components) inherit from ExternalException. Examples are COMException
and Win32Exception.
Throwing and Catching Exceptions.
Let's look in more details at throwing and catching exceptions.
Nested Exceptions
We've already seen that each exception could contain a nested (inner)
exception. Let�s explain in more details why it is a common practice in OOP
error handling to wrap exceptions in this way.
In software engineering, it is a good practice for every software component to
define small number of specific application exceptions. The component
then would throw only these specific application exceptions and not the
standard .NET exceptions. In this way the users of the software component
would know what exceptions could expect from it.
For instance, if we have a banking software and we have a component dealing
with interests, this component would define (and throw) exceptions like
InterestCalculationException and InvalidPeriodException. The interest
component should not throw exceptions like FileNotFoundException,
DivideByZeroException and NullReferenceException. When an error
occurs, which is not directly related to interest calculation, the respective
exception is wrapped in InterestCalculationException and the calling code
will be informed that the interest calculation was not correctly done.
Still, these business application exceptions usually do not have detailed
technical information about the nature of the problem. This is why, it is
considered a good practice to include technical details about the problem and
this is where inner exceptions come in handy. When the component throws its
application exception, it should keep the original exception as an inner
exception in order to preserve the technical details about the error.
Another example is when a software component (let�s call it Component A)
defines its own application exceptions (A-exceptions). This component
internally uses another component (called Component B). If for some reason B
throws a B exception (an exception defined in B), perhaps A will have to
propagate the error because it will not be able to do its task. And because A
cannot simply throw a B-exception, it must throw an A-exception, containing
the B-exception as a nested exception.
